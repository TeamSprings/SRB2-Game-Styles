name: Build PK3s from Folders on Tag

on:
  push:
    tags:
      - '*'
jobs:
  build:
    runs-on: ubuntu-latest # Uses the latest Ubuntu runner environment.
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Checks out your repository code.

    - name: Get tag name and short commit SHA
      id: get_versions
      run: |
        TAG_NAME="${{ github.ref_name }}"
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        
        # VERSION_NUMBER will be the tag name without the 'v' prefix
        VERSION_NUMBER="${TAG_NAME#v}"
        echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_ENV

        # TAG_VERSION_STRING will be used for string versions in init.lua (e.g., '3.780' or 'cutscenetest')
        # This is simply the VERSION_NUMBER as it handles cases like "cutscenetest" or "3.500internal"
        echo "TAG_VERSION_STRING=$VERSION_NUMBER" >> $GITHUB_ENV

        # Determine NUMERIC_VERSION for rawset(_G, "Style_XXXVersion", NNNN)
        # Check if VERSION_NUMBER is purely numeric (e.g., 3.780, 3.5, 4). It allows for one optional dot.
        if echo "$VERSION_NUMBER" | grep -P '^\d+(\.\d+)?$' > /dev/null; then
          # If purely numeric, remove dot and convert to integer string (e.g., 3.780 -> 3780)
          NUMERIC_VERSION=$(echo "$VERSION_NUMBER" | sed 's/\.//g')
        else
          # If not purely numeric (e.g., "cutscenetest", "3.500internal"), set to 0.
          # This aligns with "ignore numeric version variable" for non-numerical tags.
          NUMERIC_VERSION="0"
        fi
        echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_ENV        

    - name: Install zip utility
      run: |
        sudo apt-get update # Updates the package list.
        sudo apt-get install -y zip # Installs the zip utility, which is needed for creating archives.

    - name: Update init files with version from tag
      run: |
          TAG_VERSION_STRING="${{ env.TAG_VERSION_STRING }}"
          NUMERIC_VERSION="${{ env.NUMERIC_VERSION }}"
  
          # List of directories containing init.lua files for each style
          DIRS=(
            "./SL_StyleSonicClassic_v1"
            "./SL_StyleSonicDimps_v1"
            "./SL_StyleSonicDreamcast_v1" # Assuming this is the Adventure style directory
          )
  
          for DIR in "${DIRS[@]}"; do
            INIT_FILE="$DIR/init.lua"
            echo "Processing $INIT_FILE..."
  
            if [ -f "$INIT_FILE" ]; then
              # --- Using Extended Regular Expressions (-E) for clearer syntax ---
              # --- Using '@' as the delimiter for the sed 's' command ---

              # Update 'local packVersion = 'X.YYY'' line
              # Pattern: ^(local packVersion = ')[^']*'
              # - ^: Start of line
              # - (...): ERE grouping (captured in \1). Matches 'local packVersion = ''
              # - [^']*: Matches zero or more characters that are NOT a single quote (the current version string)
              # - ': Matches the literal closing single quote
              # Replacement: \1$TAG_VERSION_STRING'
              # - \1: The captured start part 'local packVersion = ''
              # - $TAG_VERSION_STRING: The new version string
              # - ': A literal closing single quote
              # Using '@' delimiter now: s@pattern@replacement@
              sed -i -E "s@^(local packVersion = ')[^']*'@\1$TAG_VERSION_STRING'@" "$INIT_FILE"
              echo "  - Updated 'packVersion' to '$TAG_VERSION_STRING' in $INIT_FILE"
  
              # Update 'rawset(_G, "Style_XXXVersion", NNNN)' line
              # Pattern: ^(rawset\(_G, "Style_[A-Za-z]*Version", \))[0-9]*(\))
              # - ^: Start of line
              # - (...): ERE grouping (captured in \1). Matches 'rawset(_G, "Style_XXXVersion", ' (parentheses escaped as literal)
              # - [0-9]*: Matches the current numeric version (zero or more digits)
              # - (...): ERE grouping (captured in \2). Matches the literal closing parenthesis ')' (escaped)
              # Replacement: \1$NUMERIC_VERSION\2
              # - \1: The captured start part 'rawset(_G, "Style_XXXVersion", '
              # - $NUMERIC_VERSION: The new numeric version
              # - \2: The captured closing parenthesis ')'
              # Using '@' delimiter now: s@pattern@replacement@
              sed -i -E "s@^(rawset\(_G, \"Style_[A-Za-z]*Version\", \))[0-9]*(\))@\1$NUMERIC_VERSION\2@" "$INIT_FILE"
              echo "  - Updated 'Style_*Version' (numeric) to '$NUMERIC_VERSION' in $INIT_FILE"
              
              # Set '__devMode' to nil
              # Pattern: ^(local __devMode = ).*$
              # - ^: Start of line
              # - (...): ERE grouping (captured in \1). Matches 'local __devMode = '
              # - .*: Matches the rest of the line
              # - $: End of line
              # Replacement: \1nil
              # - \1: The captured start part 'local __devMode = '
              # - nil: The literal 'nil'
              # Using '@' delimiter now: s@pattern@replacement@
              sed -i -E "s@^(local __devMode = ).*$@\1nil@" "$INIT_FILE"
              echo "  - Set '__devMode' to 'nil' in $INIT_FILE"
            else
              echo "  - Warning: $INIT_FILE not found. Skipping."
            fi
          done
          
    - name: Zipping Classic Style contents into PK3
      # Using VERSION_NUMBER for a cleaner artifact name, or TAG_NAME if you prefer the 'v' prefix
      run: zip -r "../L_ClassicStyle_v${{ env.VERSION_NUMBER }}.pk3" ./*
      working-directory: ./SL_StyleSonicClassic_v1

    - name: Zipping Dimps Style contents into PK3
      run: zip -r "../L_DimpsStyle_v${{ env.VERSION_NUMBER }}.pk3" ./*
      working-directory: ./SL_StyleSonicDimps_v1

    - name: Zipping Adventure Style contents into PK3
      run: zip -r "../L_AdventureStyle_v${{ env.VERSION_NUMBER }}.pk3" ./*
      working-directory: ./SL_StyleSonicDreamcast_v1

    - name: Upload PK3s as artifacts
      uses: actions/upload-artifact@v4 # This action uploads the generated PK3 files as workflow artifacts.
      with:
        name: Style Release - ${{ env.TAG_NAME }} # Naming the artifact bundle with the full tag name
        path: |
          L_ClassicStyle_v${{ env.VERSION_NUMBER }}.pk3
          L_DimpsStyle_v${{ env.VERSION_NUMBER }}.pk3
          L_AdventureStyle_v${{ env.VERSION_NUMBER }}.pk3
          
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2 # Use a specific version, e.g., v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Styles - ${{ github.ref_name }}
        body: |
          Automated release for ${{ github.ref_name }}
        draft: true  # Set to true if you want to manually review before publishing
        prerelease: false # Set to true if this is a pre-release
        files: |
          L_ClassicStyle_v${{ env.VERSION_NUMBER }}.pk3
          L_DimpsStyle_v${{ env.VERSION_NUMBER }}.pk3
          L_AdventureStyle_v${{ env.VERSION_NUMBER }}.pk3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub Actions
          
